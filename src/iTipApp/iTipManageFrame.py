# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Nov 24 15:49:03 2008

#   Programmer: xsmile
#   E-mail:     xsmile117@gmail.com
#
#
#   Distributed under the terms of the GPL (GNU Public License)
#
#   iTip is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

import wx

import iTipApp

from iTipApp.iTipFunction import iTipWork
from iTipApp.AboutFrame import iTipAbout
from iTipApp.iTipFrame import iTipFrame
from iTipApp.iTipCommon import SoundThread
from iTipApp.iTipSetFrame import iTipSetDialog
from iTipApp.AboutFrame import iTipAbout
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

class iTipManageFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        
        self.iTips=[]
        
        # begin wxGlade: iTipManageFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.SIMPLE_BORDER|wx.RESIZE_BORDER|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.menubar = wx.MenuBar()
        self.iTip = wx.Menu()
        self.newiTip = wx.MenuItem(self.iTip, 11, u"新建", "", wx.ITEM_NORMAL)
        self.iTip.AppendItem(self.newiTip)
        self.editiTip = wx.MenuItem(self.iTip, 12, u"编辑", "", wx.ITEM_NORMAL)
        self.iTip.AppendItem(self.editiTip)
        self.deleteiTip = wx.MenuItem(self.iTip, 13, u"删除", "", wx.ITEM_NORMAL)
        self.iTip.AppendItem(self.deleteiTip)
        self.deleteAll = wx.MenuItem(self.iTip, 14, u"全部删除", "", wx.ITEM_NORMAL)
        self.iTip.AppendItem(self.deleteAll)
        self.iTip.AppendSeparator()
        self.exitiTip = wx.MenuItem(self.iTip, 15, u"退出管理", "", wx.ITEM_NORMAL)
        self.iTip.AppendItem(self.exitiTip)
        self.menubar.Append(self.iTip, u"便笺")
        self.manageiTip = wx.Menu()
        self.showNormaliTip = wx.MenuItem(self.manageiTip, 21, u"普通便笺", "", wx.ITEM_NORMAL)
        self.manageiTip.AppendItem(self.showNormaliTip)
        self.showAlarmiTip = wx.MenuItem(self.manageiTip, 22, u"提醒便笺", "", wx.ITEM_NORMAL)
        self.manageiTip.AppendItem(self.showAlarmiTip)
        self.showAlliTip = wx.MenuItem(self.manageiTip, 23, u"全部便笺", "", wx.ITEM_NORMAL)
        self.manageiTip.AppendItem(self.showAlliTip)
        self.manageiTip.AppendSeparator()
        self.searchiTip = wx.MenuItem(self.manageiTip, 24, u"查找...", "", wx.ITEM_NORMAL)
        self.manageiTip.AppendItem(self.searchiTip)
        self.setiTip = wx.MenuItem(self.manageiTip, 30, u"设置...", "", wx.ITEM_NORMAL)
        self.manageiTip.AppendItem(self.setiTip)
        self.manageiTip.Append(25, u"关闭所有显示", "", wx.ITEM_NORMAL)
        self.menubar.Append(self.manageiTip, u"管理")
        self.helpiTip = wx.Menu()
        self.aboutiTip =wx.MenuItem(self.helpiTip,40,u'关于...')
        self.helpiTip.AppendItem(self.aboutiTip)
        self.menubar.Append(self.helpiTip, u"帮助")
        self.SetMenuBar(self.menubar)
        # Menu Bar end
        self.statusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.toolbar)
        self.toolbar.AddLabelTool(0, u"新建", wx.Bitmap("pic\\toolnew.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"新建", u"创建一张新便笺")
        self.toolbar.AddLabelTool(1, u"编辑", wx.Bitmap("pic\\tooledit.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"编辑", u"编辑当前选定的便笺")
        self.toolbar.AddLabelTool(2, u"删除", wx.Bitmap("pic\\tooldelete.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"删除", u"删除选定的便笺")
        self.toolbar.AddLabelTool(3, u"查找", wx.Bitmap("pic\\toolsearch.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"查找", u"按内容查找便笺")
        self.toolbar.AddLabelTool(4, u"显示", wx.Bitmap("pic\\toolset.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"显示", u"显示当前选定的便笺")
        self.toolbar.AddLabelTool(8, u"关闭", wx.Bitmap("pic\\toolcloseAll.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"关闭", u"关闭所有打开的便笺")
        self.toolbar.AddLabelTool(9, u"关于", wx.Bitmap("pic\\toolabout.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, u"关于", u"有关iTip的一些信息")
        # Tool Bar end
        self.list = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.list.InsertColumn(0, u'序号')
        self.list.InsertColumn(1, u'摘要')
        self.list.InsertColumn(2, u'创建时间')
        self.list.InsertColumn(3, u'提醒时间')
        self.list.SetColumnWidth(0, 40)
        self.list.SetColumnWidth(1, 140)
        self.list.SetColumnWidth(2, 130)
        self.list.SetColumnWidth(3, 130)
        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OniTipNew, self.newiTip)
        self.Bind(wx.EVT_MENU, self.OniTipEdit, self.editiTip)
        self.Bind(wx.EVT_MENU, self.OniTipDelete, self.deleteiTip)
        self.Bind(wx.EVT_MENU, self.OniTipDeleteAll, self.deleteAll)
        self.Bind(wx.EVT_MENU, self.OniTipExit, self.exitiTip)
        self.Bind(wx.EVT_MENU, self.OniTipNormalManage, self.showNormaliTip)
        self.Bind(wx.EVT_MENU, self.OniTipAlarmManage, self.showAlarmiTip)
        self.Bind(wx.EVT_MENU, self.OniTipAllManage, self.showAlliTip)
        self.Bind(wx.EVT_MENU, self.OniTipSearch, self.searchiTip)
        self.Bind(wx.EVT_MENU, self.OniTipSet, self.setiTip)
        self.Bind(wx.EVT_MENU, self.OniTipAbout, id=40)
        self.Bind(wx.EVT_MENU, self.OniTipCloseAll, id=25)
        self.Bind(wx.EVT_TOOL, self.OniTipNew, id=0)
        self.Bind(wx.EVT_TOOL, self.OniTipEdit, id=1)
        self.Bind(wx.EVT_TOOL, self.OniTipDelete, id=2)
        self.Bind(wx.EVT_TOOL, self.OniTipSearch, id=3)
        self.Bind(wx.EVT_TOOL, self.OniTipShow, id=4)
        self.Bind(wx.EVT_TOOL, self.OniTipCloseAll, id=8)
        self.Bind(wx.EVT_TOOL, self.OniTipAbout, id=9)
        
        self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, self.list)
        self.list.Bind(wx.EVT_LEFT_DCLICK, self.OniTipShow)
        
        
        self.Bind(wx.EVT_SHOW, self.OnShow)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: iTipManageFrame.__set_properties
        self.SetTitle(u"管理")
        self.SetIcon(wx.Icon("pic\\iTip.ico", wx.BITMAP_TYPE_ICO))
        self.statusbar.SetStatusWidths([-1])
        # statusbar fields
        statusbar_fields = [""]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)
        self.toolbar.SetToolBitmapSize((30, 30))
        self.toolbar.Realize()
        self.list.SetMinSize((450,200))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: iTipManageFrame.__do_layout
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.list, 1, wx.EXPAND, 0)
        self.SetSizer(sizer)
        sizer.Fit(self)
        self.Layout()
        self.CenterOnScreen()
        # end wxGlade

    def OniTipNew(self, event): # wxGlade: iTipManageFrame.<event_handler>
        self.GetParent().OniTipNew(event)

    def OniTipEdit(self, event): # wxGlade: iTipManageFrame.<event_handler>
        index=self.list.GetFirstSelected()
        if index!=-1 and self.list.GetNextSelected(index)==-1:
            iTipShow=wx.FindWindowById(self.iTips[index].id)
            if iTipShow==None:
                iTipShow=iTipFrame(wx.FindWindowById(1107),self.iTips[index].id,"")
                iTipShow.id=self.iTips[index].id
                iTipShow.iTip=self.iTips[index]
                iTipShow.iTipRefresh()
                iTipShow.CenterOnScreen()
                iTipShow.Show()
            else:
                iTipShow.Show()
                iTipShow.CenterOnScreen()
                iTipShow.Raise()
                
        elif index!=-1 and self.list.GetNextSelected(index)!=-1:
            dlg = wx.MessageDialog(None, u"您只能选择一条便笺进行修改！",
                                    u'注意',wx.OK)
            dlg.ShowModal()
            dlg.Destroy()

    def OniTipDelete(self, event): # wxGlade: iTipManageFrame.<event_handler>
        index=self.list.GetFirstSelected()
        if index!=-1:
            dlg = wx.MessageDialog(None, u"确认删除所选便笺？",
                                    u'注意',wx.YES_NO | wx.ICON_QUESTION)
            if dlg.ShowModal()== wx.ID_YES:
                while index!=-1:
                    iTipWork().delete(self.iTips[index])
                    self.destroyiTip(self.iTips[index])
                    index=self.list.GetNextSelected(index)
                th=SoundThread('sound\\recycle.wav',iTipApp.isiTipSoundOn)
                th.start()
                self.iTips=iTipApp.iTipAll
                self.iTipListShow(self.iTips)
            else:
                pass
            dlg.Destroy()

    def OniTipDeleteAll(self, event): # wxGlade: iTipManageFrame.<event_handler>
        self.iTips=[]
        for iTip in iTipApp.iTipAll:
            print '#$%#^%$'
            iTipWork().delete(iTip)
            self.destroyiTip(iTip)
        self.list.DeleteAllItems()
        th=SoundThread('sound\\recycle.wav',iTipApp.isiTipSoundOn)
        th.start()

    def OniTipExit(self, event): # wxGlade: iTipManageFrame.<event_handler>
        self.OnClose(event)

    def OniTipNormalManage(self, event): # wxGlade: iTipManageFrame.<event_handler>
        self.iTips=[]
        for iTip in iTipApp.iTipAll:
            if iTip.isRead:
                self.iTips.append(iTip)
        self.iTipListShow(self.iTips)

    def OniTipAlarmManage(self, event): # wxGlade: iTipManageFrame.<event_handler>
        self.iTips=[]
        for iTip in iTipApp.iTipAll:
            if not iTip.isRead:
                self.iTips.append(iTip)
        self.iTipListShow(self.iTips)

    def OniTipAllManage(self, event): # wxGlade: iTipManageFrame.<event_handler>
        self.iTips=[]
        self.iTips=iTipApp.iTipAll
        self.iTipListShow(self.iTips)

    def OniTipSearch(self, event): # wxGlade: iTipManageFrame.<event_handler>
        dlg = wx.TextEntryDialog(None,u"请输入你要查找的关键字",\
                                        u"按内容查找", "", style=wx.OK|wx.CANCEL)
        dlg.Centre()
        if dlg.ShowModal()== wx.ID_OK:
            self.iTips=iTipWork().search(dlg.GetValue())
            self.iTipListShow(self.iTips)
        dlg.Destroy()

    def OniTipShow(self,event):
        index=self.list.GetFirstSelected()
        if index!=-1:
            while index!=-1:
                iTipShow=self.showiTip(self.iTips[index])
                iTipShow.Show()
                iTipShow.Raise()
                index=self.list.GetNextSelected(index)
            
    
    def OniTipCloseAll(self, event): # wxGlade: iTipManageFrame.<event_handler>
        for iTipShow in self.GetParent().GetChildren():
            if type(iTipShow)==iTipApp.iTipFrame.iTipFrame:
                iTipShow.OniTipHide(event)

    def OniTipSet(self, event): # wxGlade: iTipManageFrame.<event_handler>
        dlg=iTipSetDialog(self)
        dlg.CentreOnParent()
        dlg.ShowModal()

    def OniTipAbout(self, event): # wxGlade: iTipManageFrame.<event_handler>
        dlg=iTipAbout(None)
        dlg.ShowModal()
        dlg.Destroy()

    
    
    def iTipListShow(self,iTips):
        self.list.DeleteAllItems()
        num=0
        for iTip in iTips:
            self.list.InsertStringItem(num,str(num+1))
            self.list.SetStringItem(num,1,iTip.brief)
            self.list.SetStringItem(num,2,iTip.createdate.strftime('%Y-%m-%d %H:%M:%S'))
            if iTip.isRead==False:
                self.list.SetStringItem(num,3,iTip.alarm.strftime('%Y-%m-%d %H:%M:%S'))
            else:
                self.list.SetStringItem(num,3,u'')
            num=num+1
            
    def OnClose(self, event):
        self.Hide()

    def OnShow(self,event):
        self.iTipListShow(iTipApp.iTipAll)
        self.iTips=iTipApp.iTipAll
        
    def OnRightClick(self, event):
        # only do this part the first time so the events are only bound once
        if not hasattr(self, "popupID1"):
            self.popupID1 = wx.NewId()
            self.popupID2 = wx.NewId()
            self.popupID3 = wx.NewId()
            self.popupID4 = wx.NewId()
            self.popupID5 = wx.NewId()
            
            self.Bind(wx.EVT_MENU, self.OniTipShow, id=self.popupID1)
            self.Bind(wx.EVT_MENU, self.OniTipEdit, id=self.popupID2)
            self.Bind(wx.EVT_MENU, self.OniTipDelete, id=self.popupID3)
            self.Bind(wx.EVT_MENU, self.OniTipSearch, id=self.popupID4)
            self.Bind(wx.EVT_MENU, self.OniTipDeleteAll, id=self.popupID5)
        menu = wx.Menu()
        menu.Append(self.popupID1, u"显示")
        menu.AppendSeparator()
        menu.Append(self.popupID2, u"编辑")
        menu.Append(self.popupID3, u"删除")
        menu.Append(self.popupID4, u"查找")
        menu.Append(self.popupID5, u"删除全部")
        self.list.PopupMenu(menu, event.GetPosition())
        menu.Destroy()
        
    def showiTip(self,iTip):
        iTipShow=wx.FindWindowById(iTip.id)
        if iTipShow==None:
            iTipShow=iTipFrame(wx.FindWindowById(1107),iTip.id,"")
            iTipShow.id=iTip.id
            iTipShow.iTip=iTip
            iTipStyle=iTip.style
            if iTipStyle.iTipfont!='':
                size=wx.Size(iTipStyle.iTipsize_width,iTipStyle.iTipsize_height)
                pos=wx.Point(iTipStyle.iTippos_x,iTipStyle.iTippos_y)
                font=iTipShow.content.GetFont()
                font.SetNativeFontInfoFromString(iTipStyle.iTipfont)
                if iTipStyle.isiTipChange:
                    iTipShow.SetSize(size)
                iTipShow.content.SetFont(font)
                iTipShow.SetPosition(pos)
                iTipShow.isiTipMark=iTipStyle.isiTipMark
                iTipShow.isiTipTop=iTipStyle.isiTipTop
                iTipShow.isiTipChange=iTipStyle.isiTipChange
                if iTipShow.isiTipTop:
                    iTipShow.winstyle=iTipShow.topstyle
                    iTipShow.menu.FindItemById(2).Check(iTipStyle.isiTipTop)
                if iTipShow.isiTipMark:
                    iTipShow.backcolour=iTipApp.iTipMarkColour()
                    iTipShow.menu.FindItemById(3).Check(iTipStyle.isiTipMark)  
            if not iTipShow.isiTipChange:
                iTipShow.miniTip()      
        return iTipShow
    
    def destroyiTip(self,iTip):
        iTipShow=wx.FindWindowById(iTip.id)
        if iTipShow!=None:
            iTipShow.Destroy()
        self.GetParent().deleteiTipAlarmer(iTip.id)
        
    
# end of class iTipManageFrame


