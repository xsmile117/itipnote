# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Nov 23 18:51:47 2008

#   Programmer: xsmile
#   E-mail:     xsmile117@gmail.com
#
#
#   Distributed under the terms of the GPL (GNU Public License)
#
#   iTip is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

import wx
import random
import datetime,time

import iTipApp
from iTipApp.iTipFunction import iTipWork
from iTipApp.AlarmSet import AlarmSet
from iTipDB.iTipInfo import Style
from iTipApp.iTipCommon import SoundThread
from iTipDB.iTipDBwork import iTipDB

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

class iTipFrame(wx.Frame):
    def __init__(self, *args, **kwds):
    
        # some flags
        self.isiTipChange=True
        self.isiTipMark=False
        self.isiTipTop=False
        
        # some data
        self.id=-1
        self.iTip=None
        self.delta=wx.Point(0,0)
        self.date,temp=str(datetime.datetime(*time.localtime()[:6])).split(' ')
        self.hour,self.min,sec=temp.split(':')
        
        self.backcolour=wx.Colour(255,255,168)
        
        self.topstyle=wx.RESIZE_BORDER | wx.FULL_REPAINT_ON_RESIZE | wx.SIMPLE_BORDER | wx.STAY_ON_TOP |wx.FRAME_NO_TASKBAR
        self.normalstyle=wx.RESIZE_BORDER | wx.FULL_REPAINT_ON_RESIZE | wx.SIMPLE_BORDER |wx.FRAME_NO_TASKBAR
        self.winstyle=self.normalstyle
        
        # begin wxGlade: iTipFrame.__init__
        kwds["style"] = wx.RESIZE_BORDER | wx.FULL_REPAINT_ON_RESIZE | wx.SIMPLE_BORDER |wx.FRAME_NO_TASKBAR
        wx.Frame.__init__(self, *args, **kwds)
        self.shineTimer=wx.Timer(self)
         
        self.panel_1 = wx.Panel(self, -1)
        self.panel = wx.Panel(self.panel_1, -1)
        self.panel1 = wx.Panel(self.panel, -1)
        self.iTipchange = wx.BitmapButton(self.panel, -1, wx.Bitmap("pic\\iChange.png", wx.BITMAP_TYPE_ANY), style=wx.NO_BORDER)
        self.clock = wx.BitmapButton(self.panel, -1, wx.Bitmap("pic\\clock.png", wx.BITMAP_TYPE_ANY), style=wx.NO_BORDER)
        self.iTipBrief = wx.StaticText(self.panel, -1, u"")
        self.createdate = wx.StaticText(self.panel, -1, "2008-12-12 12:12:12")
        self.content = wx.TextCtrl(self.panel, -1, "", style=wx.TE_MULTILINE|wx.TE_RICH|wx.TE_CENTRE|wx.TE_WORDWRAP|wx.NO_BORDER)
        self.new = wx.BitmapButton(self.panel1, -1, wx.Bitmap("pic\\new.png", wx.BITMAP_TYPE_ANY), style=wx.NO_BORDER)
        self.save = wx.BitmapButton(self.panel1, -1, wx.Bitmap("pic\\save.png", wx.BITMAP_TYPE_ANY), style=wx.NO_BORDER)
        self.delete = wx.BitmapButton(self.panel1, -1, wx.Bitmap("pic\\delete.png", wx.BITMAP_TYPE_ANY), style=wx.NO_BORDER)
        self.font = wx.BitmapButton(self.panel1, -1, wx.Bitmap("pic\\font.png", wx.BITMAP_TYPE_ANY), style=wx.NO_BORDER)
        self.alarm = wx.BitmapButton(self.panel1, -1, wx.Bitmap("pic\\alarm.png", wx.BITMAP_TYPE_ANY), style=wx.NO_BORDER)
        self.set = wx.BitmapButton(self.panel1, -1, wx.Bitmap("pic\\set.png", wx.BITMAP_TYPE_ANY), style=wx.NO_BORDER)
        self.new.SetToolTipString(u"新建")
        self.save.SetToolTipString(u"保存")
        self.delete.SetToolTipString(u"删除 ")
        self.font.SetToolTipString(u"字体")
        self.alarm.SetToolTipString(u"提醒")
        self.set.SetToolTipString(u"管理")
        
        self.__set_properties()
        self.__do_layout()
        self.iTipBrief.Hide()
        self.createdate.SetLabel("                                  ")
        self.clock.Hide()
        self.new.Hide()
        self.delete.Hide()
        self.save.Hide()
        self.font.Hide()
        self.alarm.Hide()
        self.set.Hide()
        
        self.menu = wx.Menu()
        self.popupID1 = wx.NewId()
        self.popupID2 = 2
        self.popupID3 = 3
        self.popupID4 = wx.NewId()
        self.Bind(wx.EVT_MENU, self.OniTipHide, id=self.popupID1)
        self.Bind(wx.EVT_MENU, self.OniTipTop, id=self.popupID2)
        self.Bind(wx.EVT_MENU, self.OniTipMark, id=self.popupID3)
        self.Bind(wx.EVT_MENU, self.OniTipDelete, id=self.popupID4)
        
        self.menu.Append(self.popupID1, u"隐藏")
        self.menu.AppendSeparator()
        self.menu.Append(self.popupID2, u"置顶",kind=wx.ITEM_CHECK)
        self.menu.Append(self.popupID3, u"醒目", kind=wx.ITEM_CHECK)
        self.menu.AppendSeparator()
        self.menu.Append(self.popupID4, u"删除")
        
        self.panel.Bind(wx.EVT_LEFT_DOWN, self.OnPanelLeftDown)
        self.panel.Bind(wx.EVT_LEFT_UP, self.OnPanelLeftUp)
        self.panel.Bind(wx.EVT_MOTION, self.OnPanelMotion)
        self.iTipBrief.Bind(wx.EVT_LEFT_DOWN, self.OnPanelLeftDown)
        self.iTipBrief.Bind(wx.EVT_LEFT_UP, self.OnPanelLeftUp)
        self.iTipBrief.Bind(wx.EVT_MOTION, self.OnPanelMotion)
        
        
        self.panel1.Bind(wx.EVT_ENTER_WINDOW, self.OnPanelShow)
        self.panel.Bind(wx.EVT_ENTER_WINDOW, self.OnPanelHide)
        self.panel.Bind(wx.EVT_RIGHT_UP, self.OnRightClick)
        self.iTipBrief.Bind(wx.EVT_RIGHT_UP, self.OnRightClick)
        self.clock.Bind(wx.EVT_ENTER_WINDOW, self.OnAlarmShow)
        self.clock.Bind(wx.EVT_BUTTON, self.OnAlarmStop)
        
        self.Bind(wx.EVT_BUTTON, self.OniTipChange, self.iTipchange)
        self.Bind(wx.EVT_BUTTON, self.OniTipNew, self.new)
        self.Bind(wx.EVT_BUTTON, self.OniTipSave, self.save)
        self.Bind(wx.EVT_BUTTON, self.OniTipDelete, self.delete)
        self.Bind(wx.EVT_BUTTON, self.OniTipFont, self.font)
        self.Bind(wx.EVT_BUTTON, self.OniTipAlarm, self.alarm)
        self.Bind(wx.EVT_BUTTON, self.OniTipSet, self.set)
        
        self.Bind(wx.EVT_SHOW, self.onShow)
        
        self.Bind(wx.EVT_TIMER, self.OniTipShine)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: iTipFrame.__set_properties
        self.SetTitle("")
        self.SetPosition(wx.Point(random.randrange(300,500,1),random.randrange(100,300,1)))
        self.SetBackgroundColour(wx.Colour(128, 128, 128))
        self.iTipchange.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.iTipchange.SetSize(self.iTipchange.GetBestSize())
        self.iTipchange.SetToolTipString(u"切换显示模式")
        self.clock.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.clock.SetSize(self.clock.GetBestSize())
        self.content.SetMinSize((220,130))
        self.content.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.new.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.new.SetSize(self.new.GetBestSize())
        self.save.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.save.SetSize(self.save.GetBestSize())
        self.delete.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.delete.SetSize(self.delete.GetBestSize())
        self.font.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.font.SetSize(self.font.GetBestSize())
        self.alarm.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.alarm.SetSize(self.alarm.GetBestSize())
        self.set.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.set.SetSize(self.set.GetBestSize())
        self.panel.SetBackgroundColour(wx.Colour(255, 255, 168))
        self.panel_1.SetBackgroundColour(wx.Colour(255, 255, 168))

        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: iTipFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer1 = wx.BoxSizer(wx.VERTICAL)
        sizer2 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer2 = wx.GridSizer(1, 6, 0, 0)
        grid_size1 = wx.BoxSizer(wx.HORIZONTAL)
        grid_size1.Add(self.iTipchange, 0, 0, 0)
        grid_size1.Add(self.clock, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_size1.Add(self.iTipBrief, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer2.Add(grid_size1, 0, wx.EXPAND, 0)
        sizer2.Add(self.content, 1, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 5)
        sizer2.Add(self.createdate, 0, wx.ALIGN_RIGHT|wx.RIGHT|wx.TOP|wx.BOTTOM, 5)
        grid_sizer2.Add(self.new, 0, wx.EXPAND, 0)
        grid_sizer2.Add(self.save, 0, wx.EXPAND, 0)
        grid_sizer2.Add(self.delete, 0, wx.EXPAND, 0)
        grid_sizer2.Add(self.font, 0, wx.EXPAND, 0)
        grid_sizer2.Add(self.alarm, 0, wx.EXPAND, 0)
        grid_sizer2.Add(self.set, 0, wx.EXPAND, 0)
        self.panel1.SetSizer(grid_sizer2)
        sizer2.Add(self.panel1, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.EXPAND, 3)
        self.panel.SetSizer(sizer2)
        sizer1.Add(self.panel, 1, wx.ALL|wx.EXPAND, 5)
        self.panel_1.SetSizer(sizer1)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def OnPanelLeftDown(self, event):
        if event.EventObject==self.panel:
            self.panel.CaptureMouse()
        elif event.EventObject==self.iTipBrief:
            self.iTipBrief.CaptureMouse()
        mouse=wx.GetMousePosition()
        frame=self.GetPosition()
        self.delta=wx.Point(mouse.x-frame.x,mouse.y-frame.y)

    def OnPanelMotion(self, event):       
        if event.Dragging() and event.LeftIsDown():
            mouse=wx.GetMousePosition()
            self.Move((mouse.x-self.delta.x,\
                        mouse.y-self.delta.y))
        
    def OnPanelLeftUp(self,event):
        if event.EventObject==self.panel:
            if self.panel.HasCapture():
                self.panel.ReleaseMouse()
        elif event.EventObject==self.iTipBrief:
            if self.iTipBrief.HasCapture():
                self.iTipBrief.ReleaseMouse()
        
            
    def OnPanelShow(self,event):
        self.new.Show()
        self.delete.Show()
        self.save.Show()
        self.font.Show()
        self.alarm.Show()
        self.set.Show()
        
    def OnPanelHide(self,event):
        self.new.Hide()
        self.delete.Hide()
        self.save.Hide()
        self.font.Hide()
        self.alarm.Hide()
        self.set.Hide()
        
    def OniTipChange(self,event):
        if self.isiTipChange:
            if self.id!=-1:
                self.saveStyle()
            self.miniTip()        
            self.isiTipChange=False
        else:
            self.content.Show()
            self.createdate.Show()
            self.panel1.Show()
            self.__do_layout()
            self.createdate.SetLabel("                                  ")
            self.iTipBrief.Hide()
            if self.id!=-1:
                self.iTipRefresh()
                iTipsize=wx.Size(self.iTip.style.iTipsize_width,self.iTip.style.iTipsize_height)
                self.SetSize(iTipsize) 
            self.isiTipChange=True
    
    def OniTipSave(self,event):
        if self.shineTimer.IsRunning():
            self.iTip.isRead=True
            self.GetParent().deleteiTipAlarmer(self.iTip.id)
            self.shineTimer.Stop()
            self.MarkiTip(self.backcolour)
        content=self.content.GetValue().strip()
        isAlarm=False
        if content!='':
            if self.id==-1:
                isAlarm=iTipWork().add(content, self.date, self.hour, self.min)
                self.iTip=iTipApp.iTipAll[len(iTipApp.iTipAll)-1]
                self.id=self.iTip.id
                self.SetId(self.iTip.id)
                self.saveStyle()
            else:
                self.GetParent().deleteiTipAlarmer(self.iTip.id)
                isAlarm=iTipWork().save(self.iTip, content, self.date, self.hour, self.min)
                self.iTip=iTipWork().find(self.id)
                self.saveStyle()
            self.iTipRefresh()
            self.RefreshiTipList()
            if isAlarm:
                self.GetParent().addiTipAlarmer(self.iTip)
            else:
                self.GetParent().deleteiTipAlarmer(self.iTip.id)
        else:
            if self.id!=-1:
                dlg = wx.MessageDialog(None, u"如果内容为空将删除这张便笺，确认删除？",
                                    u'注意',wx.YES_NO | wx.ICON_QUESTION)
                if dlg.ShowModal()== wx.ID_YES:
                    self.OniTipDelete(event)
                else:
                    pass
                dlg.Destroy()
        
            
    def OniTipDelete(self,event):
        if self.id!=-1:
            dlg = wx.MessageDialog(None, u"确认删除所选便笺？",
                                    u'注意',wx.YES_NO | wx.ICON_QUESTION)
            if dlg.ShowModal()== wx.ID_YES:
                iTipWork().delete(self.iTip)
                self.GetParent().deleteiTipAlarmer(self.id)
                self.Destroy()
                th=SoundThread('sound\\recycle.wav',iTipApp.isiTipSoundOn)
                th.start()
                self.RefreshiTipList()
        else:
            self.Destroy()
            th=SoundThread('sound\\recycle.wav',iTipApp.isiTipSoundOn)
            th.start()
         
    def OniTipNew(self,event):
        if self.id!=-1:
            self.GetParent().OniTipNew(event)
        else:
            self.content.SetValue("")
            
    def OniTipFont(self,event):
        ss=wx.FontData()
        ss.SetInitialFont(self.content.GetFont())
        dialog = wx.FontDialog(self, ss)
        dialog.CentreOnParent()
        if dialog.ShowModal()==wx.ID_OK:
            data=dialog.GetFontData()
            font=data.GetChosenFont()
            if font!=None:
                f=self.content.GetFont()
                ss=font.GetNativeFontInfo().ToString()
                print ss
                print f.SetNativeFontInfoFromString(ss)
                self.content.SetFont(f)
        dialog.Destroy()
        
    def OniTipAlarm(self,event):
        alarmSet=AlarmSet(self)
        alarmSet.Centre()
        alarmSet.ShowModal()
        
    def OniTipSet(self,event):
        sframe=wx.FindWindowById(1108)
        sframe.Show()
        sframe.Raise()
        
        
    def iTipRefresh(self):
        if not self.iTip.isRead:
            self.date,self.hour,self.min=self.iTip.alarmstring.split('|')
        self.content.SetValue(self.iTip.content)
        self.createdate.SetLabel(self.iTip.createdate.strftime('%Y-%m-%d %H:%M:%S'))
        self.createdate.Show()
        #self.SetSize(self.Size)
        self.MarkiTip(self.backcolour)
        self.TopiTip(self.winstyle)
        if self.iTip.isRead and (not self.shineTimer.IsRunning()):
            self.clock.Hide()
        else:
            self.clock.Show()
            
            
    def OnRightClick(self, event):
        if event.EventObject==self.iTipBrief:
            self.iTipBrief.PopupMenu(self.menu, event.GetPosition())
        else:
            self.panel.PopupMenu(self.menu, event.GetPosition())
        
    def OniTipHide(self,event):
        if self.id!=-1 and self.IsShown():
            self.saveStyle()
            self.RefreshiTipList()
            self.Hide()
        elif self.id==-1:
            self.Destroy()
            
    
    def OniTipTop(self,event):
        if self.menu.FindItemById(2).IsChecked():
            self.winstyle=self.topstyle    
            self.isiTipTop=True
        else:
            self.winstyle=self.normalstyle
            self.isiTipTop=False
        self.TopiTip(self.winstyle)
    
    def OniTipMark(self,event):
        if self.menu.FindItemById(3).IsChecked():
            self.backcolour=iTipApp.iTipMarkColour()
            self.isiTipMark=True
        else:
            self.backcolour=wx.Colour(255,255,168)
            self.isiTipMark=False
        self.MarkiTip(self.backcolour)
    
    def OniTipShine(self,event):
        self.panel_1.SetBackgroundColour(wx.Colour(random.randrange(0,256,15),random.randrange(0,256,15),random.randrange(0,256,15)))
        self.panel_1.Refresh()
        
    def RefreshiTipList(self):
        fr=wx.FindWindowById(1108)
        if fr.IsShown():
            fr.iTipListShow(iTipApp.iTipAll)
            fr.iTips=iTipApp.iTipAll
            
    def MarkiTip(self,colour):
        self.panel_1.SetBackgroundColour(colour)
        self.panel_1.Refresh()
        
    def TopiTip(self,style):
        self.SetWindowStyleFlag(style)
        
    def miniTip(self):
        self.content.Hide()
        self.createdate.Hide()
        self.panel1.Hide()
        if self.id!=-1 and self.iTip.isRead==False:
            self.clock.Show()
        if self.id!=-1:
            self.iTipBrief.SetLabel(self.iTip.brief)
            self.iTipBrief.Show()
        self.__do_layout()
        
    def OnAlarmShow(self,event):
        self.clock.SetToolTipString(self.iTip.alarm.strftime('%Y-%m-%d %H:%M:%S'))
        
    def saveStyle(self):
        """ save style """
        style=self.iTip.style
        style.isiTipTop=self.isiTipTop
        style.isiTipMark=self.isiTipMark
        style.isiTipChange=self.isiTipChange
        font=self.content.GetFont()
        fontString=font.GetNativeFontInfo().ToString()
        style.iTipfont=fontString
        style.iTippos_x=self.GetScreenPosition().x
        style.iTippos_y=self.GetScreenPosition().y
        if self.isiTipChange==True:
            style.iTipsize_height=self.GetSize().GetHeight()
            style.iTipsize_width=self.GetSize().GetWidth()
        iTipWork().saveStyle(self.iTip)
        self.iTip=iTipWork().find(self.id)
        
    def onShow(self,event):      
        if self.id!=-1 and self.isiTipChange:
            self.iTipRefresh()  
            
    def OnAlarmStop(self,event):
        if self.shineTimer.IsRunning():
            self.OniTipSave(event)
# end of class iTipFrame


